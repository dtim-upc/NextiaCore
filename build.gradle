plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = 'edu.upc.essi.dtim.NextiaCore'
version = '0.0.2-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.apache.jena', name: 'apache-jena-libs', version: '4.1.0', ext: 'pom'
    implementation group: 'org.apache.jena', name: 'jena-querybuilder', version: '4.1.0'
    implementation 'junit:junit:4.13.1'
    implementation 'junit:junit:4.13.1'
    implementation 'junit:junit:4.13.1'

    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    testCompileOnly 'org.projectlombok:lombok:1.18.26'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.6.0'

    // https://mvnrepository.com/artifact/com.opencsv/opencsv
    implementation group: 'com.opencsv', name: 'opencsv', version: '3.7'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.0'


}

test {
    useJUnitPlatform()
}


signing {
    required {
        // signing is required if this is a release version and the artifacts are to be published
        !version.toString().endsWith('-SNAPSHOT') && tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'NextiaCore'
                description = ''
//                url = 'https://www.essi.upc.edu/dtim/nextiadi/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jflores'
                        name = 'Javier Flores'
                        email = 'jflores@essi.upc.edu'
                        url = 'https://www.essi.upc.edu/dtim/people/jflores'
                    }
                    developer {
                        id = 'snadal'
                        name = 'Sergi Nadal'
                        email = 'snadal@essi.upc.edu'
                        url = 'https://www.essi.upc.edu/dtim/people/snadal'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/dtim-upc/NextiaCore.git'
                    developerConnection = 'scm:git:ssh://github.com/dtim-upc/NextiaCore.git'
//                    url = 'https://github.com/dtim-upc/Nextia'
                }
            }
        }
    }
    repositories {
        maven {
//            credentials {
//                username nexusUsername
//                password nexusPassword
//            }

            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

        }
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

task uberJar(type: Jar) {
    println "GENERATING NEXTIACORE JAR"
    duplicatesStrategy = 'exclude'
    archiveClassifier = 'uber'
    zip64(true)

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

//Task to export NextiaCore
task copyJarToOtherProjects() {
    uberJar

    def ODIN = '..\\ODIN\\api\\lib'
    def nextiaDIPath = "..\\NextiaDI\\lib"
    def nextiaBSPath = "..\\NextiaBS\\lib"
    def nextiaDLPath = "..\\NextiaDataLayer\\lib"
    def nextiaJDPath = "..\\NextiaJD2\\lib"

    def nextiaCoreJarPath = "build/libs/nextiacore-0.0.2-SNAPSHOT-uber.jar"

    // Define the target projects
    def targetProjects = [ODIN, nextiaDIPath, nextiaBSPath, nextiaDLPath, nextiaJDPath]

    // Create a copy task for each project directory
    targetProjects.each { path ->
        // Ensure the directory exists
        new File(path).mkdirs()

        // Remove previous versions
        new File(path, 'NextiaCore.jar').delete()
        new File(path, 'nextiacore-0.0.2-SNAPSHOT-uber.jar').delete()

        copy {
            println "JAR copying to project: $path"
            from nextiaCoreJarPath
            rename { 'NextiaCore.jar' }
            into path
            doLast {
                println "JAR copied to project: $path"
            }
        }
    }
}

// La tarea de copia a los otros proyectos se ejecuta después de la tarea de generación de JAR
copyJarToOtherProjects.dependsOn uberJar
